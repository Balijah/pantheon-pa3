
The purpose of this experiment was to evaluate the performance of multiple congestion control algorithms under controlled network conditions using Pantheon, a framework for testing transport protocols. Aimed to analyze key metrics such as throughput, round-trip time (RTT), and packet loss under different network profiles.

Selected Algorithms
Intended to test the following congestion control algorithms:

Cubic – a widely used algorithm in Linux, optimized for stability and scalability.

BBR – Google's algorithm designed to maximize throughput while minimizing latency.

Vegas – an older, delay-based algorithm aiming to proactively detect congestion.

Vivace – a reinforcement learning-based congestion control scheme.

Copa – an algorithm designed for low latency and high throughput.

Network Profiles
Designed synthetic network conditions using Mahimahi traces to simulate real-world environments:

High-bandwidth, low-latency (e.g., 48 Mbps, 10 ms RTT)

Low-bandwidth, high-latency (e.g., 1 Mbps, 200 ms RTT)

Symmetric and asymmetric links with different drop-tail queue lengths

Each profile was meant to assess algorithm adaptability across varying conditions.

Testing Methodology
The testing framework was built on:

Pantheon, running in a VirtualBox VM with Ubuntu 20.04

Mahimahi for simulating network conditions

Python 2.7 and custom test scripts provided in the Pantheon repo

Each test would run for 60 seconds with multiple iterations to gather stable average metrics

Issues Encountered
Despite extensive efforts, I was unable to successfully execute the test runs due to a number of technical constraints:

Python 2.7 compatibility issues with modern systems (particularly on ARM-based Macs and Ubuntu 24)

Dependency failures, particularly with protobuf, boost-python, and other legacy libraries

Mahimahi runtime issues, such as missing binaries (mm-tunnelserver) and permission errors in network namespace setup

System architecture mismatch due to using M1/M2-based MacBook Airs that are not fully compatible with x86-based Pantheon tooling

TCP connection errors between tunnel manager processes and the emulated network

Despite attempting workarounds—such as running on Ubuntu 20.04 VMs via VirtualBox—the underlying architectural and legacy compatibility issues prevented complete test execution.

Hypothesis (If Tests Were Successful)

BBR would likely outperform the other schemes in terms of throughput due to its model-based bandwidth estimation, especially in high-bandwidth environments.

Copa and Vivace might show better latency control in lossy or asymmetric environments due to their low-latency design principles.

Vegas, being older and delay-based, may underperform in high-speed networks or when RTT fluctuations are high.

Cubic, as the default in Linux, would provide a solid baseline but might not excel in low-latency scenarios.

These hypotheses are grounded in existing literature and comparative analyses from past research.

Future Directions
To overcome current limitations, future experiments should:

Be run on native x86 Ubuntu systems or use Docker/VM snapshots known to work with Pantheon.

Consider porting tests to a more modern framework that supports Python 3.
